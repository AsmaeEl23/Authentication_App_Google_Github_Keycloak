#Demarer plusieur services
services:
  #service 1 = mysql-db-inventory
  mysql-db-inventory:
    #L'image de docker pour mysql
    image: mariadb:10.6
    #Conteneur avec la meme nom comme le service
    container_name: mysql-db-inventory
    #Il est important de redemarer toujour
    restart: always
    #Si on supprime le conteneur les donnees rest, a laide de volumes, pour stocker toutes les donnees sur mysql_data:/var/lib/mysql mais il faut declarer le volume docker mysql_data
    volumes:
      - mysql_data:/var/lib/mysql
    #Dommande a cree une base de donnees inventory-db
    environment:
      MYSQL_DATABASE: inventory-db
      MYSQL_USER: asmae
      MYSQL_PASSWORD: asmae123
      MYSQL_ROOT_PASSWORD: admin
    ports:
      #port exterieur de conteneur : port interieur de conteneur
      - 3306:3306
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 5s
      retries: 10
  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 9999:80
    environment:
      #use our my sql service name
      PMA_HOST: mysql-db-inventory
      PMA_PORT: 3306
      #acceder a la base de donnees par defaut
      PMA_ARBITRARY: 1
  sdia-inventory-service:
    #Docker who will execute the command to generate the image from Dockerfile
    build: ./inventory-service
    container_name: sdia-inventory-service
    #The port of the inventory-service
    ports:
      - '8082:8082'
    expose:
      - '8082'
    restart: always
    #inventory-service depend on mysql, to avoid the problems and warnings
    #(but that change just the order of starting not waiting until the first service start,
    #in our case no problem because mysql start quicly, to be more sure we add a healthcheck
    depends_on:
      #Start the enve-ser if the mysql srv started (service_healthy [healthcheck])
      mysql-db-inventory:
        condition : service_healthy
    #after start define the environment variable DB_URL  (://the name of mysql service :port)
    environment:
      - DB_URL=jdbc:mysql://mysql-db-inventory:3306/inventory-db
  sdia-customer-service-thymeleaf:
    #Docker who will execute the command to generate the image from Dockerfile
    build: ./customer-front-thymeleaf-application
    container_name: sdia-customer-service-thymeleaf
    #The port of the inventory-service
    ports:
      - '8081:8081'
    expose:
      - '8081'
    restart: always
    depends_on:
      - keycloak
    environment:
      - KEYCLOAK_REDIRECT_URI=http://localhost:8081/login/oauth2/code/sdia-customers-app
      - KEYCLOAK_ISSUER_URI=http://keycloak:8080/realms/sdia-app-realm
      - KEYCLOAK_AUTH=http://localhost:8080/realms/sdia-app-realm/protocol/openid-connect/auth
      - KEYCLOAK_AUTH_TOKEN=http://keycloak:8080/realms/sdia-app-realm/protocol/openid-connect/token
      - JWT_JWK_SET_URI=http://keycloak:8080/realms/sdia-app-realm/protocol/openid-connect/certs
      - INVENTORY_SERVICE_BASE_URI=http://sdia-inventory-service:8082
  postgres-service:
    image: postgres
    container_name: postgres-service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    #Create this database (name of database is keycloak)
    environment:
      #database name (same name in keycloak db)
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: k1234
    ports:
      - '5432:5432'
    expose:
      - '5432'
    healthcheck:
      test: "exit 0"
  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: asmae@gmail.com
      PGADMIN_DEFAULT_PASSWORD: azer
    volumes:
      - pgadmin_data:/var/lib/pgadmin
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      #type of data
      KC_DB: postgres
      #jdbc:postgresql://[container name/postgres-service]:5432/[database name/keycloak]
      KC_DB_URL: jdbc:postgresql://postgres-service:5432/keycloak
      #Same info of postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: k1234
      KEYCLOAK_ADMIN: admin
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
    restart: always
    ports:
      - '8080:8080'
    expose:
      - '8080'
    depends_on:
      postgres-service:
        condition: service_healthy
  angular-front:
    build: ./angular-front-app
    container_name: angular-front
    ports:
      - '80:80'
    expose:
      - '80'
    restart: always
#************************************
volumes:
  mysql_data:
  postgres_data:
  pgadmin_data: